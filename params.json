{"name":"Conformista","tagline":"Library for creating form objects for Rails applications.","body":"# Conformista [![Build Status](https://secure.travis-ci.org/avdgaag/conformista.png?branch=master)](http://travis-ci.org/avdgaag/conformista)\r\n\r\n## Introduction\r\n\r\nConformista is a library to make building presenters -- and form objects in\r\nparticular -- easier. It provides an ActiveModel-compliant base class that your\r\nown form objects can inherit from, along with standard behaviour for creating,\r\nloading, validating and persisting business objects (usually ActiveRecord\r\nmodels).\r\n\r\n## Installation\r\n\r\nConformista is distributed as a Ruby gem, which should be installed on most Macs and\r\nLinux systems. Once you have ensured you have a working installation of Ruby\r\nand Ruby gems, install the gem as follows from the command line:\r\n\r\n    $ gem install conformista\r\n\r\nTo use it with Bundler, add it to your `Gemfile`:\r\n\r\n    gem 'conformista'\r\n\r\nThen install it by running `bundle install`.\r\n\r\n## Usage\r\n\r\nThe canonical example of a form object is a sign up form. Let's say we want to\r\nlet a visitor to our Rails application sign up for an account. That will include\r\ncreating an `Account`, `User` and `Profile`.\r\n\r\n```ruby\r\nclass Account < ActiveRecord::Base\r\n  validates :name, presence: true\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\n  validates :email, :password, presence: true\r\n  has_secure_password\r\nend\r\n\r\nclass Profile < ActiveRecord::Base\r\nend\r\n```\r\n\r\nInstead of using `accepts_nested_attributes_for`, or cramming all the data in\r\nthe `User` model, or using a lot of controller logic, we use a form object to\r\npresent these three entities as a single object to the view:\r\n\r\n```ruby\r\nclass SignupController < ApplicationController\r\n  def new\r\n    @signup = Signup.new\r\n  end\r\n\r\n  def create\r\n    @signup = Signup.new(params[:signup])\r\n    if @signup.save\r\n      redirect_to root_url, notice: 'Thanks for signing up!'\r\n    else\r\n      render 'new'\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThe single object we use is a form object that inherits from\r\n`Conformista::FormObject`:\r\n\r\n```ruby\r\nclass Signup < Conformista::FormObject\r\n  presents User    => %i[email password],\r\n           Account => %i[name],\r\n           Profile => %i[bio twitter github]\r\n\r\n  attr_accessor :password_confirmation,\r\n                :terms_and_conditions\r\n\r\n  validates :password, confirmation: true\r\n  validates :terms_and_conditions, acceptance: true\r\n\r\n  after_save :deliver_welcome_email\r\n\r\n  private\r\n\r\n  def deliver_welcome_email\r\n    Notifications.welcome_email(user).deliver\r\n  end\r\nend\r\n```\r\n\r\nWe can now generate a form for our form object:\r\n\r\n```erb\r\n<%= form_for @signup, url: signup_path do |f| %>\r\n  <p>\r\n    <%= f.label :name %><br>\r\n    <%= f.text_field :name %>\r\n  </p>\r\n  <p>\r\n    <%= f.label :email %><br>\r\n    <%= f.text_field :email %>\r\n  </p>\r\n  <p>\r\n    <%= f.label :password %>\r\n    <%= f.password_field :password %>\r\n  </p>\r\n  <p>\r\n    <%= f.label :password_confirmation %><br>\r\n    <%= f.password_field :password_confirmation %>\r\n  </p>\r\n  <p>\r\n    <%= f.label :bio %><br>\r\n    <%= f.text_area :bio %><br>\r\n  </p>\r\n  <p>\r\n    <%= f.label :twitter %><br>\r\n    <%= f.text_field :twitter %><br>\r\n  </p>\r\n  <p>\r\n    <%= f.label :github %><br>\r\n    <%= f.text_field :github %><br>\r\n  </p>\r\n  <p>\r\n    <%= f.check_box :terms_and_conditions %>\r\n    I have read and agree to the terms and conditions\r\n  </p>\r\n  <p>\r\n    <%= f.submit %>\r\n  </p>\r\n<% end %>\r\n```\r\n\r\nNote how the logic specifically tied to the form, like the acceptance and\r\nconfirmation validations, and the email delivery, have been moved out of the\r\nmodel layer into the presenter layer. However, the single presenter object\r\nwill re-use the data-specific validations defined in the model.\r\n\r\n### Documentation\r\n\r\nSee the inline [API\r\ndocs](http://rubydoc.info/github/avdgaag/conformista/master/frames) for more\r\ninformation.\r\n\r\n## Other\r\n\r\n### Note on Patches/Pull Requests\r\n\r\n1. Fork the project.\r\n2. Make your feature addition or bug fix.\r\n3. Add tests for it. This is important so I don't break it in a future version\r\n   unintentionally.\r\n4. Commit, do not mess with rakefile, version, or history. (if you want to have\r\n   your own version, that is fine but bump version in a commit by itself I can\r\n   ignore when I pull)\r\n5. Send me a pull request. Bonus points for topic branches.\r\n\r\n### Issues\r\n\r\nPlease report any issues, defects or suggestions in the [Github issue\r\ntracker](https://github.com/avdgaag/conformista/issues).\r\n\r\n### What has changed?\r\n\r\nSee the [HISTORY](https://github.com/avdgaag/conformista/blob/master/HISTORY.md) file\r\nfor a detailed changelog.\r\n\r\n### Credits\r\n\r\nCreated by: Arjan van der Gaag  \r\nURL: [http://arjanvandergaag.nl](http://arjanvandergaag.nl)  \r\nProject homepage: [http://avdgaag.github.com/conformista](http://avdgaag.github.com/conformista)  \r\nDate: september 2013  \r\nLicense: [MIT-license](https://github.com/avdgaag/conformista/blob/master/LICENSE) (same as Ruby)\r\n","google":"UA-20357800-1","note":"Don't delete this file! It's used internally to help with page regeneration."}